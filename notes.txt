Lect: 2
npm i -D parcel => parcel is getting installed as Dev dependency
parcel has dependencies => its dependencies has their own dependencies => transitive dependencies
dependency vs dev dependency ?

Lect: 3
npm run start === npm start
npm run build !== npm build
only start keyword is reserved like that
using React.createElement is not friendly, so JSX was introduced
JSX is not html inside jsvascript
JSX is totally different, it has HTML-like or XML-like syntax
It is totally different syntax
React.createElement() => React Element which is an Object => on rendering => HTML Element (babal does all these things)
JSX is transpiled before it reaches the JS engine -> done by Parcel using Babel
JSX => converted to react.createElement by Babel=> React Element which is an Object => on rendering => HTML Element
try to explore different attributes for JSX as compared to html
putting one component inside other is called component composition
React component is a JS function whish returns some JSX code.
Instead of arrow function, we can also write normal fucntions, but we shall be using arrow.
we can inject any JS code inside JSx using {}
All three are same: 
    <Title />
    <Title></Title>
    {Title()}
We can put react-element inside react-component, react-component inside another react-component, reacct-compoenent inside react-element using {}
JSX sanitizes the JS which we are trying to inject using {}, and hence prevents from Cross-Side Scripting Attack
At the end of the day: 
    React is JS
    Functional Components are JS fucntions
    JSX is react.createElement 
    react.createElement is Object 

Lect: 04
Always plan about how the ui should look like, then start coding
For inline CSS: 
     style={{backgroundColor: "#f0f0f0"}}
     first {} => some js is coming
     second {} => the js object containing the css 

To dynamically pass data to a component, we use props 
It is same as passing arguments to a function as react components are JS functions only.
React wraps everything in an object and passes them
Config-driven UI: Website is driven by config received from backend
not using keys (not acceptable) <<< index as keys <<<<<<<<<< unique id (best practice)

Lect: 05
Never keep hard-coded data in components folder
Two types of exprt and import : Named-export and default export
1. Named:   export const Variable;
            import {Variable} from "path"
    When we need to export multiple things

2. Default: export default Variable
            import Variable from "path"

Can I do mix-export and imports ? 

Using React, we want to sync the data and UI.
React Hooks: Normal JS utility functions, written by facebook developers
- useStae() : Super powerful state variables
            : Whenever a state variable updates, React re-renders the component
            : All three are same: 
                const [listOfRestaurants, setListOfRestaurants] = useState(resList)
                const arr = useState(resList)
                const [listOfRestaurants, setListOfRestaurants] = arr;
                const listOfRestaurants = arr[0];
                const setListOfRestaurants = arr[1];
- useEffect() : 

React uses React-Fiber(Reconciliatio) algorithm to easily maintain a virtual DOM(an object representation of actual DOM), finds the diff and then changes the actual DOM very efficiently.



